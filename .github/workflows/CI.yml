name: CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'mkdocs.yml'

env:
  NODE_VERSION: 23.x
  # PLATFORMS: linux/amd64,linux/arm64
  PLATFORMS: linux/amd64

jobs:
  lint:
    name: Run ESLint and type checks
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: write
      checks: write
      pull-requests: write
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive --prefer-offline

      - name: Run ESLint for frontend
        continue-on-error: true
        id: eslint-frontend
        run: |
          yarn lint:frontend --max-warnings=0 --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
          
          # if success, create an empty file
          if [ $? -eq 0 ]; then
              touch eslint-results-frontend.result
          fi

      - name: Upload Frontend ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results.sarif
          category: 'Frontend'
          wait-for-processing: true

      - name: Run ESLint for backend
        continue-on-error: true
        id: eslint-backend
        run: |
          yarn lint:backend --max-warnings=0 --format @microsoft/eslint-formatter-sarif --output-file eslint-results-backend.sarif
          
          # if success, create an empty file
          if [ $? -eq 0 ]; then
              touch eslint-results-backend.result
          fi

      - name: Upload Backend ESLint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: eslint-results-backend.sarif
          category: 'Backend'
          wait-for-processing: true

      - name: Fail if ESLint found any errors
        run: |
          if [ -f eslint-results-frontend.result ] && [ -f eslint-results-backend.result ]; then
              exit 0
          else
              exit 1
          fi

      - name: Run generate and check if something changed
        run: yarn generate && git diff --exit-code

      - name: Run type checks
        run: |
          yarn typecheck

  build-container:
    name: Build container
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    needs:
      - lint
    steps:
      - name: Install numfmt if not installed
        run: |
          if ! command -v numfmt &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y numfmt
          fi

      - uses: actions/checkout@v4

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: latest=false
          # create a tag "nightly" which works like "latest" but is updated with every commit instead of only for git tags
          tags: |
            type=raw,value=nightly

          images: |
            ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ env.PLATFORMS }}
          # push: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
          push: true

      - name: Output sha of the container
        id: ref
        run: |
          tags="${{ steps.meta.outputs.tags }}"
          first_tag=$(echo $tags | cut -d ' ' -f 1)
          ref=$(docker manifest inspect -v "$first_tag" | jq -r '.[0].Ref')
          
          if [ -z "${ref}" ]; then
              echo "Failed to get the sha of the container"
              exit 1
          fi
          
          echo "ref=${ref}"
          
          # output sha
          echo "ref=${ref}" >> $GITHUB_OUTPUT

      - name: Print statistics of container
        continue-on-error: true
        run: |
          # print things like tags, labels, container size
          tags="${{ steps.meta.outputs.tags }}"
          labels="${{ steps.meta.outputs.labels }}"
          first_tag=$(echo $tags | cut -d ' ' -f 1)
          layer_count=$(docker manifest inspect -v "$first_tag" | jq -r '.[0].OCIManifest.layers | length')
          image_size=$(docker manifest inspect -v "$first_tag" | jq -r '.[0].OCIManifest.layers | map(.size) | add')
          image_size_fmt=$(numfmt --to=iec-i --suffix=B $image_size)
          
          echo "===== Container statistics ====="
          echo "Tags: $tags"
          echo "Labels: $labels"
          echo "Layer count: $layer_count"
          echo "Image size: $image_size bytes ($image_size_fmt)"
          echo "================================"

    outputs:
      ref: ${{ steps.ref.outputs.ref }}

  tag-latest-container:
    name: Tag latest container
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    needs:
      - build-container
      # Only release when all tests succeed
      - lint
    env:
      container_ref: ${{ needs.build-container.outputs.ref }}
    # only for main branch or tags
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Log in into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Generate image name
        id: name
        run: |
          lower_case_repo=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=${lower_case_repo}" >> $GITHUB_ENV

      - name: Tag container with latest using buildx
        run: |
          # tag the container as latest
          docker buildx imagetools create "${{ env.container_ref }}" --tag "${{ steps.name.outputs.image_name }}:latest"
          
          echo "Successfully tagged the container with the tag: latest"

      - name: Tag container with git tag using buildx
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # tag the container with the git tag
          docker buildx imagetools create "${{ env.container_ref }}" --tag "${{ steps.image-name.outputs.image_name }}:${{ github.ref }}"
          
          echo "Successfully tagged the container with the tag: ${{ github.ref }}"
